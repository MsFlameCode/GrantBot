# –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ JSON
import parser

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
import os

import keyboard
import const

bot = Bot(token='5442354499:AAEBXSNoEcQAWyGsgUs5puBZwKBmGClIACI')
#bot = Bot(token='5528901938:AAFpZ77W8nsAfLGYphusFio2hjHr4HEpj4A')
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await bot.send_message(message.from_user.id, const.CONST_GREETINGS, reply_markup=keyboard.create_keyboard_common())


@dp.message_handler(commands=['/help'])
async def process_help_command(message: types.Message):
    await bot.send_message(message.from_user.id, const.CONST_HELP)


@dp.message_handler(lambda message: message.text == "–í –Ω–∞—á–∞–ª–æ üòé")
async def process_start_command(message: types.Message):
    msg = "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
    await bot.send_message(message.from_user.id, msg, reply_markup=keyboard.create_keyboard_common(),
                           disable_web_page_preview=True)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ö–æ–Ω–∫—É—Ä—Å—ã
@dp.message_handler(lambda message: message.text == "–ö–æ–Ω–∫—É—Ä—Å—ã")
async def without_puree(message: types.Message):
    msg = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–æ–≤"
    const.CATEGORY = 1
    await bot.send_message(message.from_user.id, msg, reply_markup=keyboard.create_keyboard_contest(),
                           disable_web_page_preview=True)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ì—Ä–∞–Ω—Ç—ã
@dp.message_handler(lambda message: message.text == "–ì—Ä–∞–Ω—Ç—ã")
async def without_puree(message: types.Message):
    msg = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞–Ω—Ç–æ–≤"
    const.CATEGORY = 2
    await bot.send_message(message.from_user.id, msg, reply_markup=keyboard.create_keyboard_grant(),
                           disable_web_page_preview=True)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –û–±—É—á–µ–Ω–∏–µ
@dp.message_handler(lambda message: message.text == "–û–±—É—á–µ–Ω–∏–µ")
async def without_puree(message: types.Message):
    msg = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏–π"
    const.CATEGORY = 3
    await bot.send_message(message.from_user.id, msg, reply_markup=keyboard.create_keyboard_edu(),
                           disable_web_page_preview=True)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@dp.message_handler(lambda message: message.text == "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
async def without_puree(message: types.Message):
    msg = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:"
    const.CATEGORY = 4
    await bot.send_message(message.from_user.id, msg, reply_markup=keyboard.create_keyboard_event(),
                           disable_web_page_preview=True)


# –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –°–µ–≥–æ–¥–Ω—è
@dp.message_handler(lambda message: message.text == "–°–µ–≥–æ–¥–Ω—è")
async def without_puree(message: types.Message):
    msg = parser.parse_table_today()
    await bot.send_message(message.from_user.id, msg, reply_markup=keyboard.create_keyboard_contest(),
                           parse_mode='Markdown', disable_web_page_preview=True)


# –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
@dp.message_handler(lambda message: message.text == "–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ")
async def without_puree(message: types.Message):
    msg = parser.parse_table_month()
    await bot.send_message(message.from_user.id, msg, reply_markup=keyboard.create_keyboard_contest(),
                           parse_mode='Markdown', disable_web_page_preview=True)


# –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
@dp.message_handler(lambda message: message.text == "–°–∫–æ—Ä–æ")
async def without_puree(message: types.Message):
    msg = parser.parse_table_soon()
    await bot.send_message(message.from_user.id, msg, reply_markup=keyboard.create_keyboard_contest(),
                           parse_mode='Markdown', disable_web_page_preview=True)


if __name__ == '__main__':
    executor.start_polling(dp)
